{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm install)",
      "Bash(npm audit:*)",
      "Bash(npm test)",
      "Bash(npm start)",
      "Bash(cp:*)",
      "Bash(npm run verify:*)",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(curl:*)",
      "Bash(npm install:*)",
      "Bash(chmod:*)",
      "Bash(./build-images.sh:*)",
      "Bash(./test-setup.sh:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(npx jest:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(postgres:*)",
      "Bash(docker:*)",
      "Bash(apt list:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(./setup-database.sh:*)",
      "Bash(node:*)",
      "Bash(sudo sh:*)",
      "Bash(pg_config:*)",
      "Bash(NODE_ENV=test npx knex migrate:latest)",
      "Bash(npx create-react-app:*)",
      "Bash(sudo service:*)",
      "Bash(npx tsc:*)",
      "Bash(NODE_ENV=test npm run test:execution)",
      "Bash(export NODE_ENV=test)",
      "Bash(timeout 10s npm test -- --testNamePattern=\"Health Check\")",
      "Bash(rmdir:*)",
      "Bash(rm:*)",
      "Bash(timeout 5s npm run dev:*)",
      "Bash(timeout 10s npm test -- --watchAll=false)",
      "Bash(timeout 30s npm test -- --watchAll=false --verbose)",
      "Bash(timeout 10s npm start)",
      "Bash(NODE_ENV=test npm test -- --testNamePattern=\"Phase 2.2\")",
      "Bash(NODE_ENV=test npm run db:migrate:status)",
      "Bash(NODE_ENV=test npm run db:migrate)",
      "Bash(NODE_ENV=test timeout 30s npm test -- --testNamePattern=\"Phase 2.2\" --watchAll=false --verbose)",
      "Bash(NODE_ENV=test npm run db:seed)",
      "Bash(NODE_ENV=test sqlite3 src/database/test.db \".tables\")",
      "Bash(NODE_ENV=test node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'').then(result => {console.log(''Tables:'', result.map(r => r.name)); process.exit(0);})\")",
      "Bash(NODE_ENV=test npm run db:migrate:rollback)",
      "Bash(NODE_ENV=test node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'').then(result => {console.log(''Tables:'', result.map(r => r.name)); process.exit(0);})\")",
      "Bash(NODE_ENV=test node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'').then(result => {console.log(''Tables:'', result.map(r => r.name)); process.exit(0);})\")",
      "Bash(NODE_ENV=test timeout 30s npm test -- --testNamePattern=\"Phase 2.2\" --watchAll=false)",
      "Bash(NODE_ENV=test npx jest src/tests/phase-2.2.test.js --verbose)",
      "Bash(NODE_ENV=test node -e \"\nconst request = require(''supertest'');\nconst app = require(''./src/server'');\n(async () => {\n  try {\n    const loginResponse = await request(app)\n      .post(''/api/admin/login'')\n      .send({ username: ''admin'', password: ''password123'' });\n    \n    console.log(''Login response:'', JSON.stringify(loginResponse.body, null, 2));\n    \n    if (loginResponse.body && loginResponse.body.data && loginResponse.body.data.token) {\n      const contestResponse = await request(app)\n        .post(''/api/admin/contests'')\n        .set(''Authorization'', \\`Bearer ${loginResponse.body.data.token}\\`)\n        .send({\n          contest_name: ''Test Contest'',\n          description: ''Test Description'',\n          start_time: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),\n          duration: 120,\n          freeze_time: 30\n        });\n      \n      console.log(''Contest response:'', JSON.stringify(contestResponse.body, null, 2));\n    }\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  }\n  process.exit(0);\n})();\n\")",
      "Bash(PORT=3001 npm start)",
      "Bash(ss:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(PORT=3000 npm start)",
      "Bash(true)",
      "Bash(npx knex migrate:make:*)",
      "Bash(NODE_ENV=test npm test -- --testNamePattern=\"Phase 2.1\" --verbose)",
      "Bash(NODE_ENV=test npm test -- --testNamePattern=\"Phase 2.4\")",
      "Bash(NODE_ENV=test npm test -- src/tests/icpcScoring.test.js --verbose)",
      "Bash(NODE_ENV=test node src/tests/validate-scoring.js)",
      "Bash(NODE_ENV=test sqlite3 src/database/test.db \".schema submissions\")",
      "Bash(NODE_ENV=test npm test -- src/tests/icpcScoring.test.js --testNamePattern=\"should handle multiple submissions to same problem\" --verbose)",
      "Bash(NODE_ENV=test npm test -- src/tests/icpcScoring.test.js --testNamePattern=\"should update scores on new accepted submission\" --verbose)",
      "Bash(NODE_ENV=test node src/tests/test-websocket.js)",
      "Bash(NODE_ENV=test sqlite3 src/database/test.db \"SELECT * FROM teams WHERE team_name LIKE ''Test Team%''\")",
      "Bash(NODE_ENV=test node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT * FROM teams WHERE team_name LIKE ?'', [''Test Team%'']).then(result => {console.log(''Teams:'', result); process.exit(0);}).catch(err => {console.error(err); process.exit(1);})\")",
      "Bash(timeout:*)",
      "Bash(NODE_ENV=test node -e \"try { require(''./src/tests/test-websocket.js''); } catch(e) { console.error(''Error:'', e.message); process.exit(1); }\")",
      "Bash(NODE_ENV=test node -e \"console.log(''Testing socket.io-client...''); const { io } = require(''socket.io-client''); console.log(''✅ socket.io-client loaded''); process.exit(0);\")",
      "Bash(NODE_ENV=test node debug-websocket.js)",
      "Bash(NODE_ENV=test node simple-test.js)",
      "Bash(NODE_ENV=test timeout 10s node test-websocket-simple.js)",
      "Bash(NODE_ENV=test node minimal-ws-test.js)",
      "Bash(NODE_ENV=test timeout 10s node single-test.js)",
      "Bash(NODE_ENV=test node -e \"\nconst WebSocketTester = require(''./src/tests/test-websocket.js'');\nconst tester = new WebSocketTester();\n\n// Override the runTests method to only run the first test\ntester.runTests = async function() {\n  try {\n    console.log(''🧪 Starting minimal WebSocket tests...'');\n    \n    await require(''./src/utils/db'').testConnection();\n    await this.setupTestServer();\n    const testData = await this.createTestData();\n    \n    console.log(''Running basic connection test only...'');\n    await this.testBasicConnection();\n    \n    this.printResults();\n    await this.cleanup();\n    \n    console.log(''✅ Minimal test completed'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Minimal test failed:'', error.message);\n    await this.cleanup();\n    process.exit(1);\n  }\n};\n\ntester.runTests();\n\")",
      "Bash(NODE_ENV=test node phase-3.2-verification.js)",
      "Bash(NODE_ENV=test node phase-3.3-verification.js)",
      "Bash(NODE_ENV=test node phase-3.4-verification.js)",
      "Bash(NODE_ENV=test node phase-3.5-verification.js)",
      "Bash(NODE_ENV=test node phase-4.1-verification.js)",
      "Bash(NODE_ENV=test node phase-4.2-verification.js)",
      "Bash(NODE_ENV=test node create-team-scores.js)",
      "Bash(NODE_ENV=test node debug-normalization.js)",
      "Bash(NODE_ENV=test node debug-penalty.js)",
      "Bash(NODE_ENV=test node phase-3.1-verification.js)",
      "Bash(NODE_ENV=test node phase-4.1-detailed-check.js)",
      "Bash(NODE_ENV=test node phase-4.2-detailed-check.js)",
      "Bash(NODE_ENV=test node phase-4.3-verification.js)",
      "Bash(NODE_ENV=test node phase-4.3-complete-verification.js)",
      "Bash(NODE_ENV=test node phase-4.3-functional-test.js)",
      "Bash(NODE_ENV=test node phase-4.4-verification.js)",
      "Bash(NODE_ENV=test node phase-4.5-verification.js)",
      "Bash(NODE_ENV=test node phase-4.5-complete-test.js)",
      "Bash(NODE_ENV=test node phase-4.5-functional-test.js)",
      "Bash(NODE_ENV=test node phase-4.4-functional-test.js)",
      "Bash(NODE_ENV=test node phase-4-comprehensive-functional-test.js)",
      "Bash(NODE_ENV=development node server.js)",
      "Bash(REACT_APP_API_URL=http://localhost:3000 npm start)",
      "Bash(NODE_ENV=test node server.js)",
      "Bash(npm ls:*)",
      "Bash(tree:*)",
      "Bash(git init:*)",
      "Bash(npm ci:*)",
      "Bash(NODE_ENV=development npx knex migrate:latest)",
      "Bash(NODE_ENV=development npm run db:migrate)",
      "Bash(NODE_ENV=development npm run db:seed)",
      "Bash(sudo rm:*)",
      "Bash(npm cache clean:*)",
      "Bash(NODE_ENV=development npm start)",
      "Bash(npm rebuild:*)",
      "Bash(npm uninstall:*)",
      "Bash(psql:*)",
      "Bash(npx knex migrate:up:*)",
      "Bash(npx react-scripts:*)",
      "Bash(npx vite:*)",
      "Bash(npx --yes yarn install)",
      "Bash(yarn workspace client add:*)",
      "Bash(BROWSER=none npm start)",
      "Bash(cat:*)",
      "Bash(NODE_ENV=development sqlite3 src/database/development.db \".tables\")",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'').then(result => {console.log(''Tables:'', result.map(r => r.name)); process.exit(0);}).catch(err => {console.error(err); process.exit(1);})\")",
      "Bash(NODE_ENV=development node backend/src/server.js)",
      "Bash(NODE_ENV=development node src/server.js)",
      "Bash(NODE_ENV=development node -e \"const {testConnection} = require(''./src/utils/db''); testConnection().then(() => console.log(''DB OK'')).catch(err => console.error(''DB Error:'', err.message))\")",
      "Bash(NODE_ENV=development sqlite3 src/database/contest.db \".schema teams\")",
      "Bash(GENERATE_SOURCEMAP=false npm start)",
      "Bash(PORT=3001 GENERATE_SOURCEMAP=false npm start)",
      "Bash(NODE_ENV=development sqlite3 backend/src/database/contest.db \"SELECT * FROM problems LIMIT 5\")",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./src/utils/db''); db(''problems'').select(''*'').limit(5).then(result => {console.log(''Problems:'', JSON.stringify(result, null, 2)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./src/utils/db''); db(''contests'').select(''*'').limit(5).then(result => {console.log(''Contests:'', JSON.stringify(result, null, 2)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node backend/src/database/check-contests.js)",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./backend/src/utils/db''); db(''contests'').select(''*'').limit(5).then(result => {console.log(''Contests:'', JSON.stringify(result, null, 2)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node -e \"const {testConnection} = require(''./src/utils/db''); testConnection().then(() => console.log(''✅ DB connection OK'')).catch(err => console.error(''❌ DB Error:'', err.message))\")",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./backend/src/utils/db''); db(''contests'').select(''*'').limit(3).then(result => {console.log(''Contests:'', JSON.stringify(result, null, 2)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node -e \"const {testConnection} = require(''./src/utils/db''); testConnection().then(() => console.log(''✅ DB connection OK'')).catch(err => console.error(''❌ DB Error:'', err.message))\")",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./src/utils/db''); db.raw(''SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = \\''problems\\'' ORDER BY ordinal_position'').then(result => {console.log(''Problems table structure:''); result.rows.forEach(row => console.log(row)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node -e \"const {testConnection} = require(''./src/utils/db''); testConnection().then(() => console.log(''✅ DB connection OK'')).catch(err => console.error(''❌ DB Error:'', err.message))\")",
      "Bash(NODE_ENV=development node -e \"\nconsole.log(''🧪 Testing edit test case feature...'');\nconsole.log(''✅ Edit functionality should now be available with:'');\nconsole.log(''- Edit button in each test case row'');\nconsole.log(''- Modal that opens with existing test case data'');  \nconsole.log(''- API call to PUT /api/admin/testcases/{id} for updates'');\nconsole.log(''- Form populated with existing input, output, and sample values'');\nconsole.log('''');\nconsole.log(''🔧 To test manually:'');\nconsole.log(''1. Open the problem detail page'');\nconsole.log(''2. Go to Test Cases tab'');\nconsole.log(''3. Click the edit (pencil) icon for any test case'');\nconsole.log(''4. Modify the input/output and save'');\nconsole.log(''5. Verify the changes are reflected in the table'');\n\")",
      "Bash(NODE_ENV=development node test-example-testcases.js)",
      "Bash(NODE_ENV=development node -e \"const {db} = require(''./backend/src/utils/db''); db(''contests'').select(''*'').limit(3).then(result => {console.log(''Contests:'', JSON.stringify(result, null, 2)); process.exit(0);}).catch(err => {console.error(''Error:'', err.message); process.exit(1);})\")",
      "Bash(NODE_ENV=development node -e \"const {testConnection} = require(''./src/utils/db''); testConnection().then(() => console.log(''✅ DB connection OK'')).catch(err => console.error(''❌ DB Error:'', err.message))\")",
      "Bash(NODE_ENV=development npm run dev)",
      "Bash(./test-contest-creation.sh:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}