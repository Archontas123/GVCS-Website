version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: cs_club_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hackathon_db}
      POSTGRES_USER: ${POSTGRES_USER:-hackathon_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hackathon_user} -d ${POSTGRES_DB:-hackathon_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: cs_club_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: cs_club_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT:-3000}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-hackathon_db}
      - DB_USER=${POSTGRES_USER:-hackathon_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - ENABLE_CODE_EXECUTION=${ENABLE_CODE_EXECUTION:-true}
      - EXECUTION_TIMEOUT=${EXECUTION_TIMEOUT:-10}
      - MEMORY_LIMIT=${MEMORY_LIMIT:-256}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/src/database:/app/src/database
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    container_name: cs_club_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
