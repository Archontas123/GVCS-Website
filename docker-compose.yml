version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: programming_contest_postgres
    restart: always
    environment:
      POSTGRES_DB: hackathon_db
      POSTGRES_USER: hackathon_user
      POSTGRES_PASSWORD: hackathon_password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hackathon_user -d hackathon_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: programming_contest_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: programming_contest_backend
    restart: always
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hackathon_db
      - DB_USER=hackathon_user
      - DB_PASSWORD=hackathon_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your_jwt_secret_change_in_production
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/src/database:/app/src/database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=http://localhost:3000
        - REACT_APP_WS_URL=ws://localhost:3000
    container_name: programming_contest_frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  judge-environment:
    build:
      context: ./backend/docker
      dockerfile: Dockerfile
    container_name: programming_contest_judge
    restart: "no"
    profiles:
      - judge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true

volumes:
  postgres_data:
  redis_data:
