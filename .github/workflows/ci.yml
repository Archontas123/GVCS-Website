name: CI/CD Pipeline
# CS Club Hackathon Platform - Phase 6.2
# Continuous Integration and Continuous Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # ==============================================
  # TESTING JOBS
  # ==============================================
  
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "DB_TYPE=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=test_user" >> .env
          echo "DB_PASSWORD=test_password" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-jwt-secret" >> .env
      
      - name: Run database migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test
      
      - name: Run backend tests
        run: npm test
        env:
          NODE_ENV: test
          CI: true
      
      - name: Run load tests
        run: |
          # Start server in background
          npm start &
          SERVER_PID=$!
          sleep 10
          
          # Run load tests
          cd load-testing
          npm install
          npm run setup:env
          npm run test:teams -- --max-teams 10 --duration 30
          
          # Stop server
          kill $SERVER_PID
        env:
          NODE_ENV: test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
  
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Run frontend tests
        working-directory: ./client
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
      
      - name: Run frontend build
        working-directory: ./client
        run: npm run build
        env:
          REACT_APP_API_URL: http://localhost:3000/api
          REACT_APP_WS_URL: ws://localhost:3000
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          npm audit --audit-level moderate
          cd client && npm audit --audit-level moderate

  # ==============================================
  # BUILD JOBS
  # ==============================================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      judge-image: ${{ steps.meta-judge.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Backend Image
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Frontend Image
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL || 'http://localhost:3000/api' }}
            REACT_APP_WS_URL=${{ secrets.REACT_APP_WS_URL || 'ws://localhost:3000' }}
      
      # Judge Image
      - name: Extract judge metadata
        id: meta-judge
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-judge
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push judge image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-judge.outputs.tags }}
          labels: ${{ steps.meta-judge.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==============================================
  # DEPLOYMENT JOBS
  # ==============================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.hackathon-platform.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/hackathon-platform
            git pull origin develop
            
            # Update environment variables
            echo "${{ secrets.STAGING_ENV }}" > .env
            
            # Deploy with latest images
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d
            
            # Wait for services to be ready
            sleep 30
            
            # Run health check
            curl -f http://localhost/api/health || exit 1
          EOF
      
      - name: Run staging tests
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Run smoke tests against staging
          curl -f https://staging.hackathon-platform.com/api/health
          curl -f https://staging.hackathon-platform.com/health
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            Staging deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            URL: https://staging.hackathon-platform.com
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://hackathon-platform.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/hackathon-platform
            
            # Create backup before deployment
            ./scripts/deploy.sh backup
            
            # Pull latest code
            git pull origin main
            
            # Update environment variables
            echo "${{ secrets.PRODUCTION_ENV }}" > .env
            
            # Run full deployment
            ./scripts/deploy.sh deploy
          EOF
      
      - name: Verify production deployment
        run: |
          # Wait for deployment to complete
          sleep 120
          
          # Comprehensive health checks
          curl -f https://hackathon-platform.com/api/health
          curl -f https://hackathon-platform.com/health
          
          # Check specific endpoints
          curl -f https://hackathon-platform.com/api/contests
          curl -f https://hackathon-platform.com/api/problems
      
      - name: Run production smoke tests
        run: |
          # Run quick load test to verify deployment
          cd load-testing
          npm install
          SERVER_URL=https://hackathon-platform.com npm run test:load -- --max-teams 5 --duration 60
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            Production deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            URL: https://hackathon-platform.com

  # ==============================================
  # RELEASE JOBS
  # ==============================================
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-images]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Changes in this release" > release_notes.md
          git log --pretty=format:"* %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          echo "" >> release_notes.md
          echo "## Docker Images" >> release_notes.md
          echo "* Backend: \`${{ needs.build-images.outputs.backend-image }}\`" >> release_notes.md
          echo "* Frontend: \`${{ needs.build-images.outputs.frontend-image }}\`" >> release_notes.md
          echo "* Judge: \`${{ needs.build-images.outputs.judge-image }}\`" >> release_notes.md
      
      - name: Update release with notes
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            docker-compose.production.yml
            scripts/deploy.sh
          generate_release_notes: true
      
      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🚀 New release published: ${{ github.event.release.tag_name }}
            ${{ github.event.release.html_url }}

  # ==============================================
  # CLEANUP JOBS
  # ==============================================
  
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
      
      - name: Delete old frontend images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}-frontend
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
      
      - name: Delete old judge images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}-judge
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true